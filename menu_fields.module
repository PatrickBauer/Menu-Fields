<?php
 
/**
 * Implementation of hook_entity_info()
 * Registers the menu_fields entity type
 */
 function menu_fields_entity_info() {
  $options = array(
    'menu_fields' => array(
      'label' => 'Menu Fields',
      'controller class' => 'EntityAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'menu_fields',
      'fieldable' => TRUE,
      'static cache' => TRUE,
      'entity keys' => array(
        'id' => 'mfid',
      ),
      'bundles' => array(),
      'view modes' => array(
        /*'full' => array(
          'label' => t('Full content'), 
          'custom settings' => FALSE,
        ), 
        'teaser' => array(
          'label' => t('Teaser'), 
          'custom settings' => TRUE,
        ), 
        'rss' => array(
          'label' => t('RSS'), 
          'custom settings' => FALSE,
        ),*/
      ),
    )
  );
  
  //just the default bundle
  $options['menu_fields']['bundles']['menu_fields'] = array(
    'label' => 'Menu Fields',
    'admin' => array(
      'path' => 'admin/structure/menu',
      'access arguments' => array('administer menu fields'),
    ),
  );

  return $options;
}

/** 
 * Implementation of hook_form_alter()
 * Used to extend the menulink edit form with the custom entity form
 */
function menu_fields_form_menu_edit_item_alter(&$form, &$form_state) {
  //get current override status
  $mf_override = (isset($form['original_item']['#value']['mf_override'])) ? $form['original_item']['#value']['mf_override'] : 0;
  $mf_disable_inheritance = (isset($form['original_item']['#value']['mf_disable_inheritance'])) ? $form['original_item']['#value']['mf_disable_inheritance'] : 0;
    
  
  //add wrapping fieldset  
  $form['menu_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu Fields'),
    '#tree' => TRUE,
    '#parents' => array('menu_fields'),
  );
  
  //check if there are any fields assigned
  $instances = field_read_instances(array('entity_type' => 'menu_fields', 'bundle' => 'menu_fields'));
  if(!count($instances)) {
    return $form['menu_fields']['markup'] = array(
      '#markup' => t('There are no fields assigned yet. <a href="@manage-fields">Click here to add some fields.</a>', array('@manage-fields' => url('admin/structure/menu/settings/fields'))),
    );
  }
 
  //add override checkbox
  $form['mf_override'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable Menu Fields for this item (override)'),
    '#description' => t('Menu Fields is automatically enabled for this link, if there are any values given. With this checkbox you can manually disable menu links for this item, even if values are available.'),
    '#default_value' => $mf_override,
  );
 
  //add disable inheritance checkbox
  $form['mf_disable_inheritance'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable inheritance for this item'),
    '#description' => t('If checked, this menu link will not inherit its menu fields to child elements.'),
    '#default_value' => $mf_disable_inheritance,
  );
 
  //get mfid
  $mfid = (isset($form['original_item']['#value']['mfid'])) ? $form['original_item']['#value']['mfid'] : 0;

  //load entity and attach entity form
  $entity = entity_load('menu_fields', array($mfid));
  field_attach_form('menu_fields', ($mfid) ? $entity[$mfid] : array(), $form['menu_fields'], $form_state);

  //add custom submit function to save entity values
  $form['#submit'][] = 'menu_fields_form_menu_edit_item_submit';
}

/** 
 * Implementation of hook_form_submit()
 */
function menu_fields_form_menu_edit_item_submit(&$form, &$form_state) {
  if(!isset($form_state['complete form']['original_item']['#value']['mfid']) || $form_state['complete form']['original_item']['#value']['mfid'] == 0) {
    //new entity
    $save = (object) array('mfid' => NULL, 'mlid' => $form_state['values']['mlid']);
    drupal_write_record('menu_fields', $save);
    
    //update menulink row
    db_update('menu_links')
      ->fields(array('mfid' => $save->mfid))
      ->condition('mlid', $form_state['values']['mlid'])
      ->execute();
      
    //save fields
    field_attach_submit('menu_fields', $save, $form['menu_fields'], $form_state);
    field_attach_insert('menu_fields', $save);
  } else {
    //update old entity fields
    $save = (object) array('mfid' => $form_state['complete form']['original_item']['#value']['mfid'], 'mlid' => $form_state['values']['mlid']);
    
    //update fields
    field_attach_submit('menu_fields', $save, $form['menu_fields'], $form_state);
    field_attach_update('menu_fields', $save);
  }
  
  //check if fields are empty
  $instances = field_read_instances(array('entity_type' => 'menu_fields', 'bundle' => 'menu_fields'));
  $enabled = 0;
  
  //run through all fields - if one is not empty, enable menu fields for this link
  foreach($instances as $instance) {
    $info = field_info_field($instance['field_name']);
    $function = $info['module'] . '_field_is_empty';
    
    if (function_exists($function)) {
      $value = field_get_items('menu_fields', $save, $instance['field_name']);
      foreach($value as $val) {
        if(!$function($val,$info)) {
          $enabled = 1;
          break;
        }
      }
    }
  }
   
  //update status & override
  db_update('menu_links')
    ->fields(array('mf_enabled' => $enabled, 
                   'mf_override' => $form_state['values']['mf_override'],
                   'mf_disable_inheritance' => $form_state['values']['mf_disable_inheritance']))
    ->condition('mlid', $save->mlid)
    ->execute();
}

/**
 * Implementation of hook_menu()
 */
function menu_fields_menu() {
  $items = array();  
  
  //define a new default local task for the menu settings page
  $items['admin/structure/menu/settings/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Implementation of hook_permissions()
 */
function menu_fields_permission() {
  return array(
    'administer menu fields' => array(
      'title' => t('Administer menu fields'),
      'description' => t('Edit the fields and displays for menu fields.'),
    )
  );
}

/**
 * Implementation of hook_views_api()
 * Defines our module as views 3 plugins
 */
function menu_fields_views_api() {
  return array(
    'api' => 3, 
    'path' => drupal_get_path('module', 'menu_fields') . '/views', 
  );
}

/**
 * Returns the corresponding menu fields entitiy id from the active menulink or its ancestors (inheritance).
 */
function menu_fields_get_active_mfid() {
  $menu = menu_get_active_trail();
  
  //sort backwards
  rsort($menu); 
  
  //special links (e.g. user/%) -  check the menu links table for the request_path()
  if((isset($menu[0]['mfid']) && !$menu[0]['mfid']) || $menu[0]['href'] == '<front>') {
    //get path
    $path = request_path();
   
    //check for frontpage
    if($menu[0]['href'] == '<front>') {
      $path = '<front>';
    }
        
    $menu[0] = menu_fields_get_menulink_from_path($path);
  }
 
  //run through each menu item and try to find any entity (inheritance)
  foreach($menu as $key => $item) {
    //check for last entry (home)
    if(isset($item['href']) && $item['href'] == '<front>' && empty($item['link_path'])) {
      $item = menu_fields_get_menulink_from_path('<front>');
    }

    //check for disabled inheritance
    if($key > 0 && isset($item['mf_disable_inheritance']) && $item['mf_disable_inheritance']) {
      continue;
    }
        
    //check for override
    if(isset($item['mf_override']) && $item['mf_override']) {
      continue;
    } 
  
    //if enabled and entity id found
    if(isset($item['mf_enabled']) && $item['mf_enabled'] && isset($item['mfid']) && $item['mfid'] > 0) {
      return $item['mfid'];
    }
  }
  
  return NULL;
}

function menu_fields_get_menulink_from_path($path = NULL) {
  if($path === NULL) {
    $path = request_path();
  }
  
  //lookup the database
  $query = db_select('menu_links', 'ml')
            ->fields('ml')
            ->condition('ml.link_path', $path)
            ->range(0,1);

  if ($item = $query->execute()->fetchAssoc()) {
    return $item;
  } else {
    return NULL;
  }  
}